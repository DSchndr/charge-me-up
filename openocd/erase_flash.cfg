transport select dapdirect_swd; 
adapter speed 100; 
swd newdap chip cppu -enable; 
dap create chip.dap -chain-position 0; 
target create chip.cpu cortex_m -dap chip.dap; 
init;
#noooonoooonooo, this is bad. TODO: some other method.
#halt;
echo "*** Chip Info ***"
dap info;
#reset; halt;

echo "*** Unlocking Flash ***"

#set FLPROT 0xF1
mww 0x40020020 0xF1

echo "*** ERASING Flash ***"
# 27.4.2 Chip erase
# Chip erase, and the erase time are implemented by hardware and can also be configured via FLCERCNT. The operation process is as follows:
# 1) Set FLERMD. ERMD0 is 1'b 1, select chip erase mode;
# 2) Set FLPROT to 0xF1 to unprotect FLOPMD. Then set FLOPMD1 to 0x55 and FLOPMD2 to 0xAA
# 3) Write arbitrary data to any address in the code flash area.
# 4) Software query status register FLSTS. OVF, OVF=1, indicates that the erase operation is complete.
# 5) Before proceeding with the next operation, the software sets “1” to clear the FLSTS. 

#set FLERMD to chip erase | 0 0 0 ERMD1 ERMD0 0 0 0
mww 0x4002000C 0x8
#set FLPROT 0xF1
mww 0x40020020 0xF1
#set FLOPMD1 0x55
mww 0x40020004 0x55
#set FLOPMD2 0xAA
mww 0x40020008 0xAA
#write something somewhere
mww 0x0 0xCAFFEE
#wait for ovf=1
echo "Waiting for chip OK..."
set ovf [expr [chip.cpu read_memory 0x40020000 8 1]]
while {$ovf != 1} {
    set ovf [expr [chip.cpu read_memory 0x40020000 8 1]]
    sleep 1
}

echo "done erasing chip. goodbye."
