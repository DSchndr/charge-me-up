# FIXME
# write_flash.cfg:56: Error: expected integer but got "{}"
# in procedure 'script'
# at file "write_flash.cfg", line 63


transport select dapdirect_swd;
#adapter speed 100; 
adapter speed 4000; 
swd newdap chip cppu -enable; 
dap create chip.dap -chain-position 0; 
target create chip.cpu cortex_m -dap chip.dap; 
init;
#noooonoooonooo, this is bad. TODO: some other method.
#halt;
#echo "*** Chip Info ***"
dap info;

#echo "*** Unlocking Flash ***"
#set FLPROT 0xF1
#mww 0x40020020 0xF1

#echo "*** Set Flash Write Mode ***"
#set FLOPMD1 0xAA
#mww 0x40020004 0xAA
#set FLOPMD2 0x55
#mww 0x40020008 0x55



# 27.4.3 Programming (word program).
# WORD programming, write time is implemented by hardware or can be configured via PROCNT. The
# operation process is as follows:
# 1) Set FLPROT to 0xF1 to unprotect FLOPMD. Then set FLOPMD1 to 0x AA and FLOPMD2 to 0x55
# 2) Writes the appropriate data to the destination address.
# 3) Software query status register FLSTS. OVF, OVF=1, indicates that the write operation is complete.
# 4) Before proceeding with the next operation, the software sets “1” to clear the FLSTS. 

reset; halt;

set address_to_write 0x0
echo "*** Uploading Main flash from $address_to_write ***"
echo "Get a coffee now.\n"

set fp [open "flash_main.bin" rb]
fconfigure $fp -translation binary
set total_size [expr [file size "flash_main.bin"]]
set total_words [expr {$total_size / 4}]
echo "*** Uploading Main flash from $address_to_write , size $total_size ***"
puts -nonewline "Progress: [                                          ] 0%"
while {[eof $fp] == 0} {
    #this increases on every read
    set bword [read $fp 4]
    # lets get into endianness hell
    set word [binary scan $bword H* hex]
    set hex 0x[expr {$hex}]
    #echo $hex

    # Convert the hexadecimal string to its integer value
    set original_value [scan $hex %x]

    # Extract individual bytes from the integer value
    set byte3 [expr {($original_value >> 24) & 0xFF}]
    set byte2 [expr {($original_value >> 16) & 0xFF}]
    set byte1 [expr {($original_value >> 8) & 0xFF}]
    set byte0 [expr {$original_value & 0xFF}]

    # Assemble the word with swapped byte order
    set swapped_value [expr {$byte0 << 24 | $byte1 << 16 | $byte2 << 8 | $byte3}]

    # Convert the swapped integer value back to a hexadecimal string
    set swapped_word_hex [format "0x%08x" $swapped_value]
    set hex $swapped_word_hex


    #set FLPROT 0xF1
    mww 0x40020020 0xF1
    #set FLOPMD1 0xAA
    mww 0x40020004 0xAA
    #set FLOPMD2 0x55
    mww 0x40020008 0x55
    # Write the word to the target at the current address
    mww $address_to_write $hex ; #0x[expr {$hex}]
    #echo "$address_to_write $word"
    # Wait for FLSTS register = 1 
    set flashval [expr [chip.cpu read_memory 0x40020000 32 1]]
    while { [expr {$flashval != 0x1}] } {
        sleep 1
        set flashval [expr [chip.cpu read_memory 0x40020000 32 1]]
    }
    # Clear the FLSTS register
    mww 0x40020000 0x1
    # Update loading bar
    set progress [expr {($address_to_write * 100) / ($total_words * 4)}]
    puts -nonewline "\rProgress: "
    for {set i 0} {$i < 50} {incr i} {
        if {$i < ($progress / 2)} {
            puts -nonewline "#"
        } else {
            puts -nonewline " "
        }
    }
    puts -nonewline " $progress%"

    set address_to_write [expr {$address_to_write + 4}]

}
close $fp
echo ""
echo "Done, end address in dec: $address_to_write"

dump_image verify_flash_main.bin 0x0 0x10000;
#echo "*** Uploading Data flash from 0x500000, size 0x600 ***"
#echo "You should be finished drinking your coffee now."
#echo "Get a new coffee."
echo "Done."